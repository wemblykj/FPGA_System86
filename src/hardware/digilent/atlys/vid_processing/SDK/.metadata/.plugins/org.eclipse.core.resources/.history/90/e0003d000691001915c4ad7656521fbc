/*
 * TestPatternGenerator.h
 *
 *  Created on: 17 Jun 2019
 *      Author: administrator
 */

#ifndef TESTPATTERNGENERATOR_H_
#define TESTPATTERNGENERATOR_H_

#include "Component.h"

#include "tpg.h"

template<int BaseAddress>
class TestPatternGenerator : public Component<BaseAddress, TPG_CONTROL, TPG_STATUS> {
public:
	TestPatternGenerator() {}
	virtual ~TestPatternGenerator() {}

	bool GetEnabled() const;
	void SetEnabled(bool enable);

	bool GetReset() const;
	void SetReset(bool reset);


	//void ReportSettings() const;

	// TPG specific
	void FSyncReset();
};

#include "tpg.h"

template<int BaseAddress>
bool TestPatternGenerator<BaseAddress>::GetEnabled() const
{
	const Xuint32 control = GetControl();
	return (control & TPG_CTL_EN_MASK) == TPG_CTL_EN_MASK;
}

template<int BaseAddress>
void TestPatternGenerator<BaseAddress>::SetEnabled(bool enable)
{
	const Xuint32 control = GetControl();
	if (enable)
	{
		control &= ~TPG_CTL_EN_MASK;
	}
	else
	{
		control |= TPG_CTL_EN_MASK;
	}

	SetControl(control);
}

template<int BaseAddress>
bool TestPatternGenerator<BaseAddress>::GetReset() const
{
	Xuint32 control = GetControl();
	return (control & TPG_RST_RESET) == TPG_RST_RESET;
}

template<int BaseAddress>
void TestPatternGenerator<BaseAddress>::SetReset(bool reset)
{
	Xuint32 control = GetControl();
	if (reset)
	{
		control &= ~TPG_RST_RESET;
	}
	else
	{
		control |= TPG_RST_RESET;
	}

	SetControl(control);
}

template<int BaseAddress>
void TestPatternGenerator<BaseAddress>::FSyncReset()
{
	Xuint32 control = GetControl();
	control |= TPG_RST_AUTORESET;

	SetControl(control);
}

/*template<int BaseAddress>
void TestPatternGenerator<BaseAddress>::ReportSettings() const {

  Xuint32 status, reg_val;

  xil_printf("Test Pattern Generator Core Configuration:\r\n");
  xil_printf(" Enable Bit: %s\r\n", GetEnabled() ? "high" : "low");
  xil_printf(" Register Update Bit: %1d\r\n", (TPG_ReadReg(BaseAddress, TPG_CONTROL) & TPG_CTL_RUE_MASK) >> 1);
  xil_printf(" Reset Bit: %1d\r\n", GetReset() ? "high" : "low");
  status = GetStatus();
  xil_printf(" TPG Status: %08x \r\n", status);
  xil_printf(" Core Version:   %1d.%1d\r\n", TPG_ReadReg(BaseAddress, TPG_VERSION));
  reg_val = GetControl();
  xil_printf("TPG_CONTROL           : %8x\r\n", reg_val);
  reg_val = TPG_ReadReg(BaseAddress, TPG_IRQ_EN );
  xil_printf("TPG_IRQ_EN : %8x\r\n", reg_val);
  reg_val = (TPG_ReadReg(BaseAddress, TPG_ACTIVE_SIZE ) && 0x1FFF);
  xil_printf("Active Rows      : %8d\r\n", reg_val);
  reg_val = (TPG_ReadReg(BaseAddress, TPG_ACTIVE_SIZE) >> 16);
  xil_printf("Active Columns      : %8d\r\n", reg_val);
}*/

#endif /* TESTPATTERNGENERATOR_H_ */
