/*
 * Component.h
 *
 *  Created on: 17 Jun 2019
 *      Author: administrator
 */

#ifndef COMPONENT_H_
#define COMPONENT_H_

#include "xbasic_types.h"
#include "xil_io.h"

template<int BaseAddress, int Control, int Status>
class Component {
public:
	Component() {}
	virtual ~Component() {}

	Xuint32 GetBaseAddress() const { return BaseAddress; }

	Xuint32 GetControl() const;
	void SetControl(Xuint32 control);

	Xuint32 GetStatus() const;
	void SetStatus(Xuint32 status);

	virtual bool GetEnabled() const = 0;
	virtual void SetEnabled(bool enable) = 0;

	virtual bool GetReset() const = 0;
	virtual void SetReset(bool reset) = 0;

	void Report() const;

protected:
	virtual void ReportTitle() const = 0;
	virtual void ReportSettings() const = 0;
};

template<int BaseAddress, int Control, int Status>
Xuint32 Component<BaseAddress, Control, Status>::GetControl() const
{
	return Xil_In32(BaseAddress + Control);
}

template<int BaseAddress, int Control, int Status>
void Component<BaseAddress, Control, Status>::SetControl(Xuint32 control)
{
	Xil_Out32(BaseAddress + Control, control);
}

template<int BaseAddress, int Control, int Status>
Xuint32 Component<BaseAddress, Control, Status>::GetStatus() const
{
	return Xil_In32(BaseAddress + Status);
}

template<int BaseAddress, int Control, int Status>
void Component<BaseAddress, Control, Status>::SetStatus(Xuint32 status)
{
	Xil_Out32(BaseAddress + Status, status);
}

template<int BaseAddress, int Control, int Status>
void Component<BaseAddress, Control, Status>::ReportSettings() const {

  Xuint32 status, reg_val;

  xil_printf("Test Pattern Generator Core Configuration:\r\n");
  xil_printf(" Enable Bit: %s\r\n", GetEnabled() ? "high" : "low");
  xil_printf(" Register Update Bit: %1d\r\n", (TPG_ReadReg(BaseAddress, TPG_CONTROL) & TPG_CTL_RUE_MASK) >> 1);
  xil_printf(" Reset Bit: %1d\r\n", GetReset() ? "high" : "low");
  status = this->GetStatus();
  xil_printf(" TPG Status: %08x \r\n", status);
  xil_printf(" Core Version:   %1d.%1d\r\n", TPG_ReadReg(BaseAddress, TPG_VERSION));
  reg_val = this->GetControl();
  xil_printf("TPG_CONTROL           : %8x\r\n", reg_val);
  reg_val = TPG_ReadReg(BaseAddress, TPG_IRQ_EN );
  xil_printf("TPG_IRQ_EN : %8x\r\n", reg_val);
  reg_val = (TPG_ReadReg(BaseAddress, TPG_ACTIVE_SIZE ) && 0x1FFF);
  xil_printf("Active Rows      : %8d\r\n", reg_val);
  reg_val = (TPG_ReadReg(BaseAddress, TPG_ACTIVE_SIZE) >> 16);
  xil_printf("Active Columns      : %8d\r\n", reg_val);
}

#endif /* COMPONENT_H_ */
