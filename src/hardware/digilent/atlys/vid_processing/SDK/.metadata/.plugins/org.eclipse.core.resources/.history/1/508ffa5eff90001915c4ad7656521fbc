/*
 * TestPatternGenerator.cpp
 *
 *  Created on: 17 Jun 2019
 *      Author: administrator
 */

#include "TestPatternGenerator.h"

#include "tpg.h"

TestPatternGenerator::TestPatternGenerator(Xuint32 baseAddress)
: m_baseAddress(baseAddress)
{
	// TODO Auto-generated constructor stub

}

TestPatternGenerator::~TestPatternGenerator() {
	// TODO Auto-generated destructor stub
}

Xuint32 TestPatternGenerator::GetControl()
{
	return TPG_ReadReg(m_baseAddress, TPG_CONTROL);
}

void TestPatternGenerator::SetControl(Xuint32 control)
{
	TPG_WriteReg(m_baseAddress, TPG_CONTROL, control);
}

Xuint32 TestPatternGenerator::GetStatus()
{
	return TPG_ReadReg(m_baseAddress, TPG_CONTROL);
}

void TestPatternGenerator::SetStatus(Xuint32 status)
{
	TPG_WriteReg(m_baseAddress, TPG_CONTROL, status);
}

bool TestPatternGenerator::GetEnabled()
{
	Xuint32 status = GetStatus();
	return (status & TPG_CTL_EN_MASK) == TPG_CTL_EN_MASK;
}

void TestPatternGenerator::SetEnabled(bool enable)
{
	Xuint32 control = GetControl();
	if (enable)
	{
		status &= ~TPG_CTL_EN_MASK;
	}
	else
	{
		status |= TPG_CTL_EN_MASK;
	}

	SetStatus(status);
}

bool TestPatternGenerator::GetReset()
{
	Xuint32 control = GetControl();
	return (status & TPG_RST_RESET) == TPG_RST_RESET
}

void TestPatternGenerator::SetReset(bool reset)
{
	Xuint32 control = GetControl();
	if (reset)
	{
		status &= ~TPG_RST_RESET;
	}
	else
	{
		status |= TPG_RST_RESET;
	}

	SetStatus(status);
}

void TestPatternGenerator::FSyncReset()
{
	Xuint32 control = GetControl();
	status |= TPG_RST_AUTORESET;

	SetStatus(status);
}

void TestPatternGenerator::ReportSettings() {

  Xuint32 status, reg_val;

  xil_printf("Test Pattern Generator Core Configuration:\r\n");
  xil_printf(" Enable Bit: %1d\r\n", TPG_ReadReg(m_baseAddress, TPG_CONTROL) & TPG_CTL_EN_MASK);
  xil_printf(" Register Update Bit: %1d\r\n", (TPG_ReadReg(m_baseAddress, TPG_CONTROL) & TPG_CTL_RUE_MASK) >> 1);
  xil_printf(" Reset Bit: %1d\r\n", TPG_ReadReg(m_baseAddress, TPG_CONTROL) & TPG_RST_RESET);
  status = TPG_ReadReg(m_baseAddress, TPG_STATUS);
  xil_printf(" TPG Status: %08x \r\n", status);
  xil_printf(" Core Version:   %1d.%1d\r\n", TPG_ReadReg(m_baseAddress, TPG_VERSION));
  reg_val = TPG_ReadReg(m_baseAddress, TPG_CONTROL );
  xil_printf("TPG_CONTROL           : %8x\r\n", reg_val);
  reg_val = TPG_ReadReg(m_baseAddress, TPG_IRQ_EN );
  xil_printf("TPG_IRQ_EN : %8x\r\n", reg_val);
  reg_val = (TPG_ReadReg(m_baseAddress, TPG_ACTIVE_SIZE ) && 0x1FFF);
  xil_printf("Active Rows      : %8d\r\n", reg_val);
  reg_val = (TPG_ReadReg(m_baseAddress, TPG_ACTIVE_SIZE) >> 16);
  xil_printf("Active Columns      : %8d\r\n", reg_val);
}
