###################################################################
##
## Name     : axi_ttl_memory_bus
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_ttl_memory_bus

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION DESC = AXI TTL Memory Bus Adapter
OPTION LONG_DESC = TTL Memory Bus over AXI4 bus
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)
OPTION IP_GROUP = WemblyKJ:TTL:Memory
OPTION USAGE_LEVEL = BASE_USER

## Bus Interfaces
# TTL Memory


BUS_INTERFACE BUS = S_RAM, BUS_STD = ttl_ram, BUS_TYPE = TARGET, ISVALID = (C_MEM_TYPE == 0)
BUS_INTERFACE BUS = S_ROM, BUS_STD = ttl_rom, BUS_TYPE = TARGET, ISVALID = (C_MEM_TYPE == 1)
# AXI
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE


## Generics for VHDL or Parameters for Verilog
# TTL Memory
PARAMETER C_MEM_TYPE = 0, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM:S_ROM, ASSIGNMENT = OPTIONAL, RANGE=(0,1), VALUES=(0=RAM, 1=ROM)
PARAMETER C_RAM_TYPE = 0, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM, ASSIGNMENT = OPTIONAL, RANGE=(0), VALUES=(0=SRAM), ISVALID = (C_MEM_TYPE == 0)
PARAMETER C_ROM_TYPE = 0, DT = INTEGER, PERMIT = BASE_USER, BUS = S_ROM, ASSIGNMENT = OPTIONAL, RANGE=(0,1), VALUES=(0=PROM, 1=EPROM), ISVALID = (C_MEM_TYPE == 1)
PARAMETER C_CTRL_WIDTH = 3, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM:S_ROM, ASSIGNMENT = OPTIONAL_UPDATE, RANGE=(1:3), VALUES=(1=CE, 2=CE|OE, 3=CE|OE|WE), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_control_bus_size
PARAMETER C_ADDR_WIDTH = 16, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM:S_ROM, ASSIGNMENT = OPTIONAL, RANGE=(4:16)
PARAMETER C_DATA_WIDTH = 8, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM:S_ROM, ASSIGNMENT = OPTIONAL, RANGE=(4,8)
# Mapping
PARAMETER C_USE_DYNAMIC_MAPPING = 0, DT = INTEGER, PERMIT = BASE_USER, ASSIGNMENT = OPTIONAL, RANGE=(0:1), VALUES=(0=Static, 1=Dynamic)
PARAMETER C_MAPPED_BASEADDR = 0x00000000, DT = std_logic_vector(C_M_AXI_ADDR_WIDTH downto 0), PERMIT = BASE_USER, ASSIGNMENT = REQUIRE, PAIR = C_MAPPED_HIGHADDR, ADDRESS = BASE, MIN_SIZE = 0x1000
PARAMETER C_MAPPED_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(C_M_AXI_ADDR_WIDTH downto 0), PERMIT = BASE_USER, ASSIGNMENT = UPDATE, PAIR = C_MAPPED_BASEADDR, ADDRESS = HIGH, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mapped_high
PARAMETER C_MAPPED_SIZE = 0x00000000, DT = std_logic_vector(C_M_AXI_ADDR_WIDTH downto 0), PERMIT = BASE_USER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mapped_size
# Interrupts
PARAMETER C_INTERRUPT_PRESENT = 0, DT = INTEGER, RANGE = (0,1)
# Family Generics
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_INSTANCE = axi_ttl_memory_bus_inst, DT = STRING
# AXI Generics

PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI
#PARAMETER C_M_AXI_MAX_BURST_LEN = 16, DT = INTEGER, RANGE = (16,32,64,128,256), IPLEVEL_DRC_PROC = iplevel_drc_maxburst
PARAMETER C_M_AXI_SUPPORT_THREADS = 0, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_SUPPORTS_READ = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_M_AXI_SUPPORTS_WRITE = 0, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_supports_write
PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_M_AXI_PROTOCOL = AXI4, BUS = M_AXI, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, VALUES = (AXI4=AXI4, AXI3=AXI3, AXI4LITE = AXI4LITE)
#PARAMETER C_M_AXI_ACLK_FREQ_HZ = 100000000, BUS = M_AXI, DT = integer, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_USER_SIGNALS = 0, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_M_AXI_AWUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_M_AXI_SUPPORTS_USER_SIGNALS == 1)
#PARAMETER C_M_AXI_ARUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_M_AXI_SUPPORTS_USER_SIGNALS == 1)
#PARAMETER C_M_AXI_WUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_M_AXI_SUPPORTS_USER_SIGNALS == 1)
#PARAMETER C_M_AXI_RUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_M_AXI_SUPPORTS_USER_SIGNALS == 1)
#PARAMETER C_M_AXI_BUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_M_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_INTERCONNECT_M_AXI_READ_ISSUING = 2, DT = integer, RANGE = (1, 2), BUS = M_AXI, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_WRITE_ISSUING = 32, DT = integer, RANGE = (1, 2, 4, 8, 16, 32), BUS = M_AXI, TYPE = NON_HDL

PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S_AXI, ASSIGNMENT = CONSTANT
#PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, BUS = S_AXI, DT = integer, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_S_AXI_THREAD_ID_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, VALUES = (AXI4=AXI4, AXI3=AXI3, AXI4LITE = AXI4LITE)
PARAMETER C_S_AXI_SUPPORTS_READ = 1, BUS = S_AXI, DT = integer, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, BUS = S_AXI, DT = integer, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0, BUS = S_AXI, DT = integer, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (0, 1)

## Ports

# TTL Memory bus
PORT nChipEnable = nChipEnable, DIR = I, BUS = S_RAM:S_ROM, PERMIT = BASE_USER, INITIALVAL=VCC
PORT nOutputEnable = nOutputEnable, DIR = I, BUS = S_RAM:S_ROM, PERMIT = BASE_USER, INITIALVAL=VCC, ISVALID = (C_MEM_TYPE == 0 || C_ROM_TYPE == 1)
PORT nWriteEnable = nWriteEnable, DIR = I, BUS = S_RAM, PERMIT = BASE_USER, INITIALVAL=VCC, ISVALID = (C_MEM_TYPE == 0)
PORT Address = Addr, DIR = I, VEC = [(C_ADDR_WIDTH-1):0], BUS = S_RAM:S_ROM, PERMIT = BASE_USER
#PORT data = Data, DIR = O, VEC = [(C_DATA_WIDTH-1):0], BUS = S_ROM, PERMIT = BASE_USER, ISVALID = (C_MEM_TYPE == 1)
PORT Data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [(C_DATA_WIDTH-1):0], BUS = S_RAM:S_ROM, PERMIT = BASE_USER
#PORT data = Data, DIR = O, VEC = [(C_DATA_WIDTH-1):0], BUS = S_ROM, PERMIT = BASE_USER, ISVALID = (C_MEM_TYPE == 1)
# Mapping
PORT MappedAddress = "",  DIR = I, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, INITIALVAL = GND, ISVALID = (C_USE_DYNAMIC_MAPPING == 1)

# Interrupts
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = MEDIUM, ISVALID = (C_INTERRUPT_PRESENT == 1)

# AXI Master
PORT M_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = M_AXI
PORT M_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI
#PORT M_AXI_AWID = AWID, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_AWADDR = AWADDR, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE
#PORT M_AXI_AWLEN = AWLEN, BUS = M_AXI, DIR = O, VEC = [7:0]
#PORT M_AXI_AWSIZE = AWSIZE, BUS = M_AXI, DIR = O, VEC = [2:0]
#PORT M_AXI_AWBURST = AWBURST, BUS = M_AXI, DIR = O, VEC = [1:0]
#PORT M_AXI_AWLOCK = AWLOCK, BUS = M_AXI, DIR = O
#PORT M_AXI_AWCACHE = AWCACHE, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
#PORT M_AXI_AWPROT = AWPROT, BUS = M_AXI, DIR = O, VEC = [(3-1):0]
#PORT M_AXI_AWREGION = AWREGION, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
#PORT M_AXI_AWQOS = AWQOS, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
#PORT M_AXI_AWUSER = AWUSER, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_AWUSER_WIDTH-1):0]
PORT M_AXI_AWVALID = AWVALID, BUS = M_AXI, DIR = O
PORT M_AXI_AWREADY = AWREADY, BUS = M_AXI, DIR = I
#PORT M_AXI_WID = WID, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_WDATA = WDATA, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_WSTRB = WSTRB, BUS = M_AXI, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE
#PORT M_AXI_WLAST = WLAST, BUS = M_AXI, DIR = O
#PORT M_AXI_WUSER = WUSER, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_WUSER_WIDTH-1):0]
PORT M_AXI_WVALID = WVALID, BUS = M_AXI, DIR = O
PORT M_AXI_WREADY = WREADY, BUS = M_AXI, DIR = I
#PORT M_AXI_BID = BID, BUS = M_AXI, DIR = I, VEC = [(C_M_AXI_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_BRESP = BRESP, BUS = M_AXI, DIR = I, VEC = [1:0], ENDIAN = LITTLE
#PORT M_AXI_BUSER = BUSER, BUS = M_AXI, DIR = I, VEC = [(C_M_AXI_BUSER_WIDTH-1):0]
PORT M_AXI_BVALID = BVALID, BUS = M_AXI, DIR = I
PORT M_AXI_BREADY = BREADY, BUS = M_AXI, DIR = O
#PORT M_AXI_ARID = ARID, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_ARADDR = ARADDR, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE
#PORT M_AXI_ARLEN = ARLEN, BUS = M_AXI, DIR = O, VEC = [7:0]
#PORT M_AXI_ARSIZE = ARSIZE, BUS = M_AXI, DIR = O, VEC = [2:0]
#PORT M_AXI_ARBURST = ARBURST, BUS = M_AXI, DIR = O, VEC = [1:0]
#PORT M_AXI_ARLOCK = ARLOCK, BUS = M_AXI, DIR = O
#PORT M_AXI_ARCACHE = ARCACHE, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
#PORT M_AXI_ARPROT = ARPROT, BUS = M_AXI, DIR = O, VEC = [(3-1):0]
#PORT M_AXI_ARREGION = ARREGION, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
#PORT M_AXI_ARQOS = ARQOS, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
#PORT M_AXI_ARUSER = ARUSER, BUS = M_AXI, DIR = O, VEC = [(C_M_AXI_ARUSER_WIDTH-1):0]
PORT M_AXI_ARVALID = ARVALID, BUS = M_AXI, DIR = O
PORT M_AXI_ARREADY = ARREADY, BUS = M_AXI, DIR = I
#PORT M_AXI_RID = RID, BUS = M_AXI, DIR = I, VEC = [(C_M_AXI_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_RDATA = RDATA, BUS = M_AXI, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT M_AXI_RRESP = RRESP, BUS = M_AXI, DIR = I, VEC = [1:0], ENDIAN = LITTLE
#PORT M_AXI_RLAST = RLAST, BUS = M_AXI, DIR = I
#PORT M_AXI_RUSER = RUSER, BUS = M_AXI, DIR = I, VEC = [(C_M_AXI_RUSER_WIDTH-1):0]
PORT M_AXI_RVALID = RVALID, BUS = M_AXI, DIR = I
PORT M_AXI_RREADY = RREADY, BUS = M_AXI, DIR = O

# AXI Slave
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
END
