##############################################################################
## Filename:          C:\Users\Wembly\Development\System86\src\hardware\xilinx\MyProcessorIPLib\pcores/system86_v1_00_a/data/system86_v2_1_0.mpd
## Description:       Microprocessor Peripheral Description
## Date:              Sun Mar 17 10:55:45 2019 (by Create and Import Peripheral Wizard)
##############################################################################

BEGIN system86

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION STYLE = MIX
OPTION DESC = Wembly's Namco System86 Replication
OPTION LONG_DESC = A generic FPGA implementation of the Namco System86 arcade board
OPTION IP_GROUP = WemblyKJ:Arcade
OPTION USAGE_LEVEL = BASE_USER
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

IO_INTERFACE IO_IF = VIDEO_OUT, IO_TYPE = video, ISVALID = (C_VIDEO_OUT_TYPE==0)
IO_INTERFACE IO_IF = CONN_J2, IO_TYPE = conn_j2
##IO_INTERFACE IO_IF = CONN_J4, IO_TYPE = conn_j4
##IO_INTERFACE IO_IF = CONN_J5, IO_TYPE = conn_j5


## Bus Interfaces
BUS_INTERFACE BUS = S_MCPU_11A, BUS_STD = mc6809e, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_SCPU_9A, BUS_STD = mc6809e, BUS_TYPE = INITIATOR

#BUS_INTERFACE BUS=CONN_J2, BUS_STD=conn_j2, BUS_TYPE = INITIATOR
#BUS_INTERFACE BUS=CONN_J4, BUS_STD=conn_j4, BUS_TYPE = TARGET
#BUS_INTERFACE BUS=CONN_J5, BUS_STD=conn_j5, BUS_TYPE = INITIATOR

BUS_INTERFACE BUS = PROM_3R, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = PROM_3S, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_4R, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_4V, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_5V, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_6U, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_4R, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_4S, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_7R, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = EPROM_7S, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = EPROM_9C, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = EPROM_9D, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = EPROM_12C, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = EPROM_12D, BUS_STD = ttl_rom, BUS_TYPE = INITIATOR
#
##BUS_INTERFACE BUS = SRAM_3F, BUS_STD = ttl_ram, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = SRAM_4N, BUS_STD = ttl_ram, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = SRAM_7N, BUS_STD = ttl_ram, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = SRAM_10M, BUS_STD = ttl_ram, BUS_TYPE = INITIATOR
##BUS_INTERFACE BUS = SRAM_11K, BUS_STD = ttl_ram, BUS_TYPE = INITIATOR

BUS_INTERFACE BUS = VIDEO_BUS, BUS_STD = video, BUS_TYPE = MASTER, ISVALID = (C_VIDEO_OUT_TYPE==1)

## Parameters
PARAMETER C_FAMILY=spartan6, DT=STRING
PARAMETER C_INSTANCE=system86_inst, DT=STRING
#PARAMETER C_USE_HARDWARE_CLOCKS = 0, DT = INTEGER, PERMIT=BASE_USER, RANGE = (0:1) #, VALUES = (0 = CUS27, 1 = External), ASSIGNMENT = OPTIONAL
PARAMETER C_VIDEO_COMPONENT_DEPTH = 4, DT = INTEGER, BUS = VIDEO_BUS, PERMIT=BASE_USER, RANGE=(4), ASSIGNMENT = CONSTANT
PARAMETER C_VIDEO_OUT_TYPE = 0, DT = INTEGER, BUS = VIDEO_BUS, PERMIT=BASE_USER, RANGE = (0,1), ASSIGNMENT = OPTIONAL, VALUES = (0=IO_IF, 1=BUS), TYPE = NON_HDL
#PARAMETER C_VIDEO_SYNC_TYPE = 0, DT = INTEGER, IFIO = VIDEO_OUT, PERMIT=BASE_USER, RANGE = (0,1), ASSIGNMENT = OPTIONAL, VALUES = (0=Composite, 1=Discrete), ISVALID = (C_VIDEO_OUT_TYPE == 0), TYPE = NON_HDL
PARAMETER C_EPROM_M27512_ADDR_WIDTH = 16, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_EPROM_M27512_DATA_WIDTH = 8, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_EPROM_M27256_ADDR_WIDTH = 15, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_EPROM_M27256_DATA_WIDTH = 8, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_EPROM_MB7138_ADDR_WIDTH = 11, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_EPROM_MB7138_DATA_WIDTH = 8, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_PROM_MB7124_ADDR_WIDTH=9, DT=INTEGER, ASSIGNMENT=CONSTANT 
PARAMETER C_PROM_MB7124_DATA_WIDTH=8, DT=INTEGER, ASSIGNMENT=CONSTANT 
PARAMETER C_PROM_MB7116_ADDR_WIDTH = 9, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_PROM_MB7116_DATA_WIDTH = 4, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_PROM_MB7112_ADDR_WIDTH = 5, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_PROM_MB7112_DATA_WIDTH = 8, DT = INTEGER, ASSIGNMENT = CONSTANT 
PARAMETER C_SRAM_CY6462_ADDR_WIDTH=13, DT=INTEGER, ASSIGNMENT=CONSTANT 
PARAMETER C_SRAM_CY6462_DATA_WIDTH=8, DT=INTEGER, ASSIGNMENT=CONSTANT 

## Peripheral ports
# Global ports
PORT clk_48m = "", DIR = I, SIGIS = CLK, CLK_FREQ = 49512000

#PORT CLK_24M = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_HARDWARE_CLOCKS == 1)
#PORT CLK_12M = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_HARDWARE_CLOCKS == 1)
#PORT CLK_6M = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_HARDWARE_CLOCKS == 1)

PORT rst_n = "", DIR = I, SIGIS = RST,  INITIALVAL = VCC

# Component video IF
PORT vid_clk = "", DIR = O, SIGIS = CLK, IO_IF = VIDEO_OUT, IO_IS = VideoClock, ISVALID = (C_VIDEO_OUT_TYPE==0)
PORT vid_red = "", DIR = O, VEC = [(C_VIDEO_COMPONENT_DEPTH-1):0], IO_IF = VIDEO_OUT, IO_IS = RedComponent, ISVALID = (C_VIDEO_OUT_TYPE == 0)
PORT vid_green = "", DIR = O, VEC = [(C_VIDEO_COMPONENT_DEPTH-1):0], IO_IF = VIDEO_OUT, IO_IS = GreenComponent, ISVALID = (C_VIDEO_OUT_TYPE == 0)
PORT vid_blue = "", DIR = O, VEC = [(C_VIDEO_COMPONENT_DEPTH-1):0], IO_IF = VIDEO_OUT, IO_IS = BlueComponent, ISVALID = (C_VIDEO_OUT_TYPE == 0)
PORT vid_hsync_n = "", DIR = O, IO_IF = VIDEO_OUT, IO_IS = HorizontalSync, ISVALID = (C_VIDEO_OUT_TYPE == 0)
PORT vid_vsync_n = "", DIR = O, IO_IF = VIDEO_OUT, IO_IS = VerticalSync, ISVALID = (C_VIDEO_OUT_TYPE == 0)
PORT vid_hblank_n = "", DIR = O, IO_IF = VIDEO_OUT, IO_IS = HorizontalBlank, ISVALID = (C_VIDEO_OUT_TYPE == 0)
PORT vid_vblank_n = "", DIR = O, IO_IF = VIDEO_OUT, IO_IS = VerticalBlank, ISVALID = (C_VIDEO_OUT_TYPE == 0)

# Component video BUS
#PORT vid_clk = Clock, DIR = O, SIGIS = CLK, BUS = VIDEO_BUS, IO_IF = VIDEO_OUT, IO_IS = VideoClock, ISVALID = (C_VIDEO_OUT_TYPE==1)
#PORT vid_data = RGB, DIR = O, VEC = [((3*C_VIDEO_COMPONENT_DEPTH)-1):0], BUS=VIDEO_BUS, ISVALID = (C_VIDEO_OUT_TYPE==1)
#PORT vid_red = "", DIR = O, VEC = [(C_VIDEO_COMPONENT_DEPTH-1):0], IO_IF = VIDEO_BUS, IO_IS = RedComponent, ISVALID = (C_VIDEO_OUT_TYPE == 0)
#PORT vid_hblank = HorizontalBlank, DIR = O, BUS=VIDEO_OUT, ISVALID = (C_VIDEO_OUT_TYPE == 1)
#PORT vid_vblank = VerticalBlank, DIR = O, BUS=VIDEO_OUT, ISVALID = (C_VIDEO_OUT_TYPE == 1)
#PORT vid_hsync = HorizontalSync, DIR = O, BUS=VIDEO_OUT, ISVALID = (C_VIDEO_OUT_TYPE == 1)
#PORT vid_vsync = VerticalSync, DIR = O, BUS=VIDEO_OUT, ISVALID = (C_VIDEO_OUT_TYPE == 1)

# J2
PORT conn_j2_sync = "", DIR = O, IO_IF = CONN_J2, IO_IS = SYNC
PORT conn_j2_red = "", DIR = O, VEC = [C_VIDEO_COMPONENT_DEPTH-1:0], IO_IF = CONN_J2, IO_IS = RED
PORT conn_j2_green = "", DIR = O, VEC = [C_VIDEO_COMPONENT_DEPTH-1:0], IO_IF = CONN_J2, IO_IS = GREEN
PORT conn_j2_blue = "", DIR = O, VEC = [C_VIDEO_COMPONENT_DEPTH-1:0], IO_IF = CONN_J2, IO_IS = BLUE

# J4
#PORT conn_j4_reset = Reset, DIR = O, BUS=CONN_J4
#PORT conn_j4_ce_n = nChipEnable, DIR = O, BUS=CONN_J4
#PORT conn_j4_oe_n = nOutputEnable, DIR = O, BUS=CONN_J4
#PORT conn_j4_we_n = nWriteEnable, DIR = O, BUS=CONN_J4
#PORT conn_j4_addr = Addr, DIR = O, VEC = [14:0], BUS=CONN_J4
#PORT conn_j4_data = Data, DIR = IO, VEC = [7:0], BUS=CONN_J4
#PORT conn_j4_voice = Voice, DIR = I, BUS=CONN_J4

# MC6809E busses
PORT mcpu_11a_e = E, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_q = Q, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_reset_n = nReset, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_halt_n = nHalt, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_irq_n = nIrq, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_firq_n = nFirq, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_nmi_n = nNmi, DIR = O, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_we_n = nWriteEnable, DIR = I, BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_addr = Address, DIR = I, VEC = [15:0], BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [7:0], BUS = S_MCPU_11A, PERMIT = BASE_USER
PORT mcpu_11a_bs = Bs, DIR = I, BUS = S_MCPU_11A, PERMIT = BASE_USER, INITIALVAL=GND
PORT mcpu_11a_ba = Ba, DIR = I, BUS = S_MCPU_11A, PERMIT = BASE_USER, INITIALVAL=GND
PORT mcpu_11a_avma = Avma, DIR = I, BUS = S_MCPU_11A, PERMIT = BASE_USER, INITIALVAL=GND
PORT mcpu_11a_busy = Busy, DIR = I, BUS = S_MCPU_11A, PERMIT = BASE_USER, INITIALVAL=GND
PORT mcpu_11a_lic = Lic, DIR = I, BUS = S_MCPU_11A, PERMIT = BASE_USER, INITIALVAL=GND

# MC6809E busses
PORT scpu_9a_e = E, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_q = Q, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_reset_n = nReset, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_halt_n = nHalt, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_irq_n = nIrq, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_firq_n = nFirq, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_nmi_n = nNmi, DIR = O, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_we_n = nWriteEnable, DIR = I, BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_addr = Address, DIR = I, VEC = [15:0], BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [7:0], BUS = S_SCPU_9A, PERMIT = BASE_USER
PORT scpu_9a_bs = Bs, DIR = I, BUS = S_SCPU_9A, PERMIT = BASE_USER, INITIALVAL=GND
PORT scpu_9a_ba = Ba, DIR = I, BUS = S_SCPU_9A, PERMIT = BASE_USER, INITIALVAL=GND
PORT scpu_9a_avma = Avma, DIR = I, BUS = S_SCPU_9A, PERMIT = BASE_USER, INITIALVAL=GND
PORT scpu_9a_busy = Busy, DIR = I, BUS = S_SCPU_9A, PERMIT = BASE_USER, INITIALVAL=GND
PORT scpu_9a_lic = Lic, DIR = I, BUS = S_SCPU_9A, PERMIT = BASE_USER, INITIALVAL=GND

# EPROM 3R
PORT prom_3r_ce_n = nChipEnable, DIR = O, BUS = PROM_3R, INITIALVAL=VCC
PORT prom_3r_addr = Addr, DIR = O, VEC = [(C_PROM_MB7124_ADDR_WIDTH-1):0], BUS = PROM_3R
PORT prom_3r_data = Data, DIR = I, VEC = [(C_PROM_MB7124_DATA_WIDTH-1):0], BUS = PROM_3R
# EPROM 3S
PORT prom_3s_ce_n = nChipEnable, DIR = O, BUS = PROM_3S
PORT prom_3s_addr = Addr, DIR = O, VEC = [(C_PROM_MB7116_ADDR_WIDTH-1):0], BUS = PROM_3S
PORT prom_3s_data = Data, DIR = I, VEC = [(C_PROM_MB7116_DATA_WIDTH-1):0], BUS = PROM_3S
# EPROM 4V
#PORT prom_4v_ce_n = nChipEnable, DIR = O, BUS = EPROM_4V
#PORT prom_4v_addr = Addr, DIR = O, VEC = [(C_EPROM_MB7138_ADDR_WIDTH-1):0], BUS = EPROM_4V
#PORT prom_4v_data = Data, DIR = I, VEC = [(C_EPROM_MB7138_DATA_WIDTH-1):0], BUS = EPROM_4V
# EPROM 5V
#PORT prom_5v_ce_n = nChipEnable, DIR = O, BUS = EPROM_5V
#PORT prom_5v_addr = Addr, DIR = O, VEC = [(C_EPROM_MB7138_ADDR_WIDTH-1):0], BUS = EPROM_5V
#PORT prom_5v_data = Data, DIR = I, VEC = [(C_EPROM_MB7138_DATA_WIDTH-1):0], BUS = EPROM_5V
# EPROM 6U
#PORT prom_6u_ce_n = nChipEnable, DIR = O, BUS = EPROM_6U
#PORT prom_6u_addr = Addr, DIR = O, VEC = [(C_EPROM_MB7112_ADDR_WIDTH-1):0], BUS = EPROM_6U
#PORT prom_6u_data = Data_I, DIR = I, VEC = [(C_EPROM_MB7112_DATA_WIDTH-1):0], BUS = EPROM_6U
# EPROM 4R
#PORT eprom_4r_ce_n = nChipEnable, DIR = O, BUS = EPROM_4R
#PORT eprom_4r_oe_n = nOutputEnable, DIR = O, BUS = EPROM_4R
#PORT eprom_4r_addr = Addr, DIR = O, VEC = [(C_EPROM_M27512_ADDR_WIDTH-1):0], BUS = EPROM_4R
#PORT eprom_4r_data = Data, DIR = I, VEC = [(C_EPROM_M27512_DATA_WIDTH-1):0], BUS = EPROM_4R
# EPROM 4S
#PORT eprom_4s_ce_n = nChipEnable, DIR = O, BUS = EPROM_4S
#PORT eprom_4s_oe_n = nOutputEnable, DIR = O, BUS = EPROM_4S
#PORT eprom_4s_addr = Addr, DIR = O, VEC = [(C_EPROM_M27256_ADDR_WIDTH-1):0], BUS = EPROM_4S
#PORT eprom_4s_data = Data, DIR = I, VEC = [(C_EPROM_M27256_DATA_WIDTH-1):0], BUS = EPROM_4S
# EPROM 7R
#PORT eprom_7r_ce_n = nChipEnable, DIR = O, BUS = EPROM_7R
#PORT eprom_7r_oe_n = nOutputEnable, DIR = O, BUS = EPROM_7R
#PORT eprom_7r_addr = Addr, DIR = O, VEC = [(C_EPROM_M27512_ADDR_WIDTH-1):0], BUS = EPROM_7R
#PORT eprom_7r_data = Data, DIR = I, VEC = [(C_EPROM_M27512_DATA_WIDTH-1):0], BUS = EPROM_7R
# EPROM 7S
#PORT eprom_7s_ce_n = nChipEnable, DIR = O, BUS = EPROM_7S
#PORT eprom_7s_oe_n = nOutputEnable, DIR = O, BUS = EPROM_7S
#PORT eprom_7s_addr = Addr, DIR = O, VEC = [(C_EPROM_M27256_ADDR_WIDTH-1):0], BUS = EPROM_7S
#PORT eprom_7s_data = Data, DIR = I, VEC = [(C_EPROM_M27256_DATA_WIDTH-1):0], BUS = EPROM_7S
# EPROM 9C
PORT eprom_9c_ce_n = nChipEnable, DIR = O, BUS = EPROM_9C, INITIALVAL=VCC
PORT eprom_9c_oe_n = nOutputEnable, DIR = O, BUS = EPROM_9C, INITIALVAL=VCC
PORT eprom_9c_addr = Addr, DIR = O, VEC = [(C_EPROM_M27256_ADDR_WIDTH-1):0], BUS = EPROM_9C
PORT eprom_9c_data = Data, DIR = I, VEC = [(C_EPROM_M27256_DATA_WIDTH-1):0], BUS = EPROM_9C
# EPROM 9D
PORT eprom_9d_ce_n = nChipEnable, DIR = O, BUS = EPROM_9D, INITIALVAL=VCC
PORT eprom_9d_oe_n = nOutputEnable, DIR = O, BUS = EPROM_9D, INITIALVAL=VCC
PORT eprom_9d_addr = Addr, DIR = O, VEC = [(C_EPROM_M27256_ADDR_WIDTH-1):0], BUS = EPROM_9D
PORT eprom_9d_data = Data, DIR = I, VEC = [(C_EPROM_M27256_DATA_WIDTH-1):0], BUS = EPROM_9D
# EPROM 12C
PORT eprom_12c_ce_n = nChipEnable, DIR = O, BUS = EPROM_12C, INITIALVAL=VCC
PORT eprom_12c_oe_n = nOutputEnable, DIR = O, BUS = EPROM_12C, INITIALVAL=VCC
PORT eprom_12c_addr = Addr, DIR = O, VEC = [(C_EPROM_M27256_ADDR_WIDTH-1):0], BUS = EPROM_12C
PORT eprom_12c_data = Data, DIR = I, VEC = [(C_EPROM_M27256_DATA_WIDTH-1):0], BUS = EPROM_12C
# EPROM 12D
PORT eprom_12d_ce_n = nChipEnable, DIR = O, BUS = EPROM_12D, INITIALVAL=VCC
PORT eprom_12d_oe_n = nOutputEnable, DIR = O, BUS = EPROM_12D, INITIALVAL=VCC
PORT eprom_12d_addr = Addr, DIR = O, VEC = [(C_EPROM_M27256_ADDR_WIDTH-1):0], BUS = EPROM_12D
PORT eprom_12d_data = Data, DIR = I, VEC = [(C_EPROM_M27256_DATA_WIDTH-1):0], BUS = EPROM_12D
# SRAM 3F
#PORT sram_3f_ce_n = nChipEnable, DIR = O, BUS = SRAM_3F, INITIALVAL=VCC
#PORT sram_3f_oe_n = nOutputEnable, DIR = O, BUS = SRAM_3F, INITIALVAL=VCC
#PORT sram_3f_we_n = nWriteEnable, DIR = O, BUS = SRAM_3F, INITIALVAL=VCC
#PORT sram_3f_addr = Addr, DIR = O, VEC = [(C_SRAM_CY6462_ADDR_WIDTH-1):0], BUS = SRAM_3F
#PORT sram_3f_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [(C_SRAM_CY6462_DATA_WIDTH-1):0], BUS = SRAM_3F
# SRAM 4N
#PORT sram_4n_ce_n = nChipEnable, DIR = O, BUS = SRAM_4N
#PORT sram_4n_oe_n = nOutputEnable, DIR = O, BUS = SRAM_4N
#PORT sram_4n_we_n = nWriteEnable, DIR = O, BUS = SRAM_4N
#PORT sram_4n_addr = Addr, DIR = O, VEC = [(C_SRAM_CY6462_ADDR_WIDTH-1):0], BUS = SRAM_4N
#PORT sram_4n_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [(C_SRAM_CY6462_DATA_WIDTH-1):0], BUS = SRAM_4N
# SRAM 7N
#PORT sram_7n_ce_n = nChipEnable, DIR = O, BUS = SRAM_7N
#PORT sram_7n_oe_n = nOutputEnable, DIR = O, BUS = SRAM_7N
#PORT sram_7n_we_n = nWriteEnable, DIR = O, BUS = SRAM_7N
#PORT sram_7n_addr = Addr, DIR = O, VEC = [(C_SRAM_CY6462_ADDR_WIDTH-1):0], BUS = SRAM_7N
#PORT sram_7n_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [(C_SRAM_CY6462_DATA_WIDTH-1):0], BUS = SRAM_7N
# SRAM 10M
#PORT sram_10m_ce_n = nChipEnable, DIR = O, BUS = SRAM_10M
#PORT sram_10m_oe_n = nOutputEnable, DIR = O, BUS = SRAM_10M
#PORT sram_10m_we_n = nWriteEnable, DIR = O, BUS = SRAM_10M
#PORT sram_10m_addr = Addr, DIR = O, VEC = [(C_SRAM_CY6462_ADDR_WIDTH-1):0], BUS = SRAM_10M
#PORT sram_10m_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [(C_SRAM_CY6462_DATA_WIDTH-1):0], BUS = SRAM_10M
## SRAM 11K
#PORT sram_11k_ce_n = nChipEnable, DIR = O, BUS = SRAM_11K
#PORT sram_11k_oe_n = nOutputEnable, DIR = O, BUS = SRAM_11K
#PORT sram_11k_we_n = nWriteEnable, DIR = O, BUS = SRAM_11K
#PORT sram_11k_addr = Addr, DIR = O, VEC = [(C_SRAM_CY6462_ADDR_WIDTH-1):0], BUS = SRAM_11K
#PORT sram_11k_data = Data, DIR = IO, THREE_STATE = FALSE, VEC = [(C_SRAM_CY6462_DATA_WIDTH-1):0], BUS = SRAM_11K

END
