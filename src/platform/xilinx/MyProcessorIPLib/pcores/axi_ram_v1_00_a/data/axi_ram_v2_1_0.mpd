###################################################################
##
## Name     : axi_ram
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_ram

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION DESC = AXI TTL RAM Emulation
OPTION LONG_DESC = TTL RAM Emulation over AXI4 bus
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)
OPTION IP_GROUP = WemblyKJ:TTL:Memory
OPTION USAGE_LEVEL = BASE_USER

## Bus Interfaces
# TTL RAM
BUS_INTERFACE BUS = S_RAM, BUS_STD = ttl_ram, BUS_TYPE = TARGET
# AXI
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
# TTL RAM
PARAMETER C_RAM_ADDR_WIDTH = 16, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM, ASSIGNMENT = REQUIRE, RANGE=(8,12,14,16,24)
PARAMETER C_RAM_DATA_WIDTH = 8, DT = INTEGER, PERMIT = BASE_USER, BUS = S_RAM, ASSIGNMENT = REQUIRE, RANGE=(8)
# Mapping
PARAMETER C_MAPPED_BASE_ADDR = 0xC0000000, DT = std_logic_vector, PERMIT = BASE_USER, MIN_SIZE = 0x100
PARAMETER C_USE_DYNAMIC_MAPPING = 0, DT = integer, PERMIT = BASE_USER, RANGE=(0:1)
# Family Generics
PARAMETER C_FAMILY = virtex6, DT = STRING
# AXI Generics
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 1, DT = INTEGER, RANGE = (1), BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, TYPE = NON_HDL, ASSIGNMENT = CONSTANT

## Ports
# TTL RAM
PORT chip_enable = ChipEnable, DIR = I, BUS = S_RAM
PORT write_enable = WriteEnable, DIR = I, BUS = S_RAM
PORT output_enable = OutputEnable, DIR = I, BUS = S_RAM
PORT addr = Addr, DIR = I, BUS = S_RAM
PORT data = Data, DIR = IO, BUS = S_RAM
# Mapping
PORT mapping_addr = C_MAPPED_BASE_ADDR,  DIR = I, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, INITIALVAL = GND, ISVALID=(C_USE_DYNAMIC_MAPPING == 1)
# AXI Master
PORT M_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = M_AXI
PORT M_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI
PORT M_AXI_ARREADY = ARREADY, DIR = I, BUS = M_AXI
PORT M_AXI_ARVALID = ARVALID, DIR = O, BUS = M_AXI
PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_RREADY = RREADY, DIR = O, BUS = M_AXI
PORT M_AXI_RVALID = RVALID, DIR = I, BUS = M_AXI
PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT M_AXI_AWREADY = AWREADY, DIR = I, BUS = M_AXI
PORT M_AXI_AWVALID = AWVALID, DIR = O, BUS = M_AXI
PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_WREADY = WREADY, DIR = I, BUS = M_AXI
PORT M_AXI_WVALID = WVALID, DIR = O, BUS = M_AXI
PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_BREADY = BREADY, DIR = O, BUS = M_AXI
PORT M_AXI_BVALID = BVALID, DIR = I, BUS = M_AXI
PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI
# AXI Slave
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = O, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = O, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = I, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = O, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = I, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = O, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = S_AXI
END
